{  
   "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"This template used to check if the connections (AWS Redshift Quick Start_ITQS ,AWS S3 Quick Start_ITQS ,AWS Tableau Quick Start_ITQS ,AWS Oracle Quick Start_ITQS) are pre-existing in IICS account.",
   "Parameters":{  
      "IICSUsername":{  
         "Type":"String"
      },
      "IICSPassword":{  
         "Type":"String",
         "NoEcho":"True"
      },
      "IICSPodLocation":{  
         "Default":"North America",
         "Description":"The IICS Data Center in which your user is registered.",
         "Type":"String"
      }
   },
   "Resources":{  
      "CheckIfUserandConnectionsExistFunction":{  
         "Type":"AWS::Lambda::Function",
         "Properties":{  
            "Code":{  
               "ZipFile":{  
                  "Fn::Join":[  
                     "\n",
                     [  
                        "import json",
                        "import cfnresponse",
                        "import urllib2",
						"import sys",
                        "def lambda_handler(event, context):",
						" if event['RequestType'] == 'Delete' :",
						"  responseData = {}",
						"  responseData['Data'] = 0",
						"  cfnresponse.send(event, context, cfnresponse.SUCCESS,responseData)",
						"  sys.exit()",
                        " username = event['ResourceProperties']['UserName']",
                        " password = event['ResourceProperties']['Password']",
                        " podLocation = event['ResourceProperties']['ICSPodLocation']",
                        " pod = 'us'",
                        " if podLocation == 'North America':",
                        "  pod = 'us'",
                        " elif podLocation == 'Europe':",
                        "  pod = 'em'",
                        " else:",
                        "  pod = 'ap'",
                        " j=''",
                        " try:",
                        "  data = '{\"@type\": \"login\",\"username\": \"'+username+'\",\"password\":\"'+password+'\"}'",
                        "  url = 'https://dm-'+pod+'.informaticacloud.com/ma/api/v2/user/login'",
                        "  req = urllib2.Request(url, data, {'Content-Type': 'application/json','Accept': 'application/json'})",
                        "  f = urllib2.urlopen(req)",
                        "  j=json.loads(f.read())",
                        "  responseValue = j['id']",
						"  icSessionId = j['icSessionId']",
						"  serverUrl = j['serverUrl']",
						"  print('Login SuccessFul')",
						"  try:",
						"   url = serverUrl +'/api/v2/connection/name/AWS%20Redshift%20Quick%20Start_ITQS/'",
                        "   req = urllib2.Request(url, headers={'Content-Type': 'application/json','Accept': 'application/json','icSessionId':icSessionId})",
						"   f = urllib2.urlopen(req)",
						"   print('AWS Redshift Quick Start Tableau connection already present')",
						"   j=json.loads(f.read())",
						"   icSessionId = j['statusCode']",
						"  except urllib2.HTTPError, e:",
						"   print('AWS Redshift Quick Start Tableau connection  not present')",
						"  try:",
						"   url = serverUrl +'/api/v2/connection/name/AWS%20S3%20Quick%20Start_ITQS/'",
                        "   req = urllib2.Request(url, headers={'Content-Type': 'application/json','Accept': 'application/json','icSessionId':icSessionId})",
						"   f = urllib2.urlopen(req)",
						"   print('AWS S3 Quick Start_ITQS connection already present')",
						"   j=json.loads(f.read())",
						"   icSessionId = j['statusCode']",
						"  except urllib2.HTTPError, e:",
						"   print('AWS S3 Quick Start_ITQS connection  not present')",
						"  try:",
						"   url = serverUrl +'/api/v2/connection/name/AWS%20Oracle%20Quick%20Start_ITQS/'",
                        "   req = urllib2.Request(url, headers={'Content-Type': 'application/json','Accept': 'application/json','icSessionId':icSessionId})",
						"   f = urllib2.urlopen(req)",
						"   print('AWS Oracle Quick Start_ITQS connection already present')",
						"   j=json.loads(f.read())",
						"   icSessionId = j['statusCode']",
						"  except urllib2.HTTPError, e:",
						"   print('AWS Oracle Quick Start_ITQS connection  not present')",
						"  try:",
						"   url = serverUrl +'/api/v2/connection/name/AWS%20Tableau%20Quick%20Start_ITQS/'",
                        "   req = urllib2.Request(url, headers={'Content-Type': 'application/json','Accept': 'application/json','icSessionId':icSessionId})",
						"   f = urllib2.urlopen(req)",
						"   print('AWS Tableau Quick Start_ITQS connection already present')",
						"   j=json.loads(f.read())",
						"   icSessionId = j['statusCode']",
						"  except urllib2.HTTPError, e:",
						"   print('AWS Tableau Quick Start_ITQS connection  not present')",
                        "  responseData = {}",
                        "  responseData['Data'] = responseValue",
                        "  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData,\"RestAPIInfo\")",
                        " except:",
                        "  responseValue = 'The failure is because : The username or password are incorrect Or The Connections with the name AWS Tableau QuickStart_ITQS,AWS S3 QuickStart_ITQS, AWS Oracle Quickstart_ITQS or AWS Redshift Quickstart_ITQS are already present in your account or the mapping or mapping task with the names S3 to Redshift and Aggregate Store Sales are already there .'",
                        "  responseData = {}",
                        "  responseData['Data'] = responseValue",
                        "  cfnresponse.send(event, context, cfnresponse.FAILED, responseData,\"RestAPIInfo\")"
                     ]
                  ]
               }
            },
            "Handler":"index.lambda_handler",
            "Role":{  
               "Fn::GetAtt":[  
                  "LambdaExecutionRole",
                  "Arn"
               ]
            },
            "Runtime":"python2.7",
            "Timeout":"60"
         }
      },
      "RestAPIInfo":{  
         "Type":"Custom::RestAPIInfo",
         "Properties":{  
            "ServiceToken":{  
               "Fn::GetAtt":[  
                  "CheckIfUserandConnectionsExistFunction",
                  "Arn"
               ]
            },
            "UserName":{  
               "Ref":"IICSUsername"
            },
            "Password":{  
               "Ref":"IICSPassword"
            },
            "ICSPodLocation":{  
               "Ref":"IICSPodLocation"
            }
         }
      },
      "LambdaExecutionRole":{  
         "Type":"AWS::IAM::Role",
         "Properties":{  
            "AssumeRolePolicyDocument":{  
               "Version":"2012-10-17",
               "Statement":[  
                  {  
                     "Effect":"Allow",
                     "Principal":{  
                        "Service":[  
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[  
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "Policies":[  
               {  
                  "PolicyName":"root",
                  "PolicyDocument":{  
                     "Version":"2012-10-17",
                     "Statement":[  
                        {  
                           "Effect":"Allow",
                           "Action":[  
                              "logs:*"
                           ],
                           "Resource":"arn:aws:logs:*:*:*"
                        }
                     ]
                  }
               }
            ]
         }
      }
   },
   "Outputs":{  

   }
}