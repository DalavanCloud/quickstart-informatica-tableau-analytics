{  
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"This template used to check if the required license i.e Redshift V2 , Amazon S3 V2  and Tableau V3 are there in IICS account.",
   "Parameters":{  
      "IICSUsername":{  
         "Type":"String"
      },
      "IICSPassword":{  
         "Type":"String",
         "NoEcho":"True"
      },
      "IICSPodLocation":{  
         "Default":"North America",
         "Description":"The IICS Data Center in which your user is registered.",
         "Type":"String"
      }
   },
   "Resources":{  
      "CheckIfLicensePresentExistFunction":{  
         "Type":"AWS::Lambda::Function",
         "Properties":{  
            "Code":{  
               "ZipFile":{  
                  "Fn::Join":[  
                     "\n",
                     [  
                        "import json",
                        "import cfnresponse",
                        "import urllib2",
						"import sys",
                        "def lambda_handler(event, context):",
						" if event['RequestType'] == 'Delete' :",
						"  responseData = {}",
						"  responseData['Data'] = 0",
						"  cfnresponse.send(event, context, cfnresponse.SUCCESS,responseData)",
						"  sys.exit()",
                        " username = event['ResourceProperties']['UserName']",
                        " password = event['ResourceProperties']['Password']",
                        " podLocation = event['ResourceProperties']['ICSPodLocation']",
                        " pod = 'us'",
                        " if podLocation == 'North America':",
                        "  pod = 'us'",
                        " elif podLocation == 'Europe':",
                        "  pod = 'em'",
                        " else:",
                        "  pod = 'ap'",
                        " j=''",
                        " try:",
                        "  data = '{\"@type\": \"login\",\"username\": \"'+username+'\",\"password\":\"'+password+'\"}'",
                        "  url = 'https://dm-'+pod+'.informaticacloud.com/ma/api/v2/user/login'",
                        "  req = urllib2.Request(url, data, {'Content-Type': 'application/json','Accept': 'application/json'})",
                        "  f = urllib2.urlopen(req)",
                        "  j=json.loads(f.read())",
                        "  responseValue = j['id']",
						"  icSessionId = j['icSessionId']",
						"  serverUrl = j['serverUrl']",
						"  print('Login SuccessFul')",
						"  url = serverUrl +'/api/v2/connector/metadata?connectorName=Amazon%20Redshift%20v2'",
                        "  req = urllib2.Request(url, headers={'icSessionId':icSessionId})",
						"  f = urllib2.urlopen(req)",
						"  response = f.read()",
						"  print(response[3])",
						"  print('Amazon Redshift V2 license is available')",
						"  url = serverUrl +'/api/v2/connector/metadata?connectorName=Amazon%20S3%20v2'",
                        "  req = urllib2.Request(url, headers={'icSessionId':icSessionId})",
						"  f = urllib2.urlopen(req)",
						"  response = f.read()",
						"  print(response[3])",
						"  print('Amazon S3 V2 license is available')",
						"  url = serverUrl +'/api/v2/connector/metadata?connectorName=Tableau%20V3'",
                        "  req = urllib2.Request(url, headers={'icSessionId':icSessionId})",
						"  f = urllib2.urlopen(req)",
						"  response = f.read()",
						"  print(response[3])",
						"  print('Tableau V3 license is available')",
                        "  responseData = {}",
                        "  responseData['Data'] = responseValue",
                        "  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData,\"RestAPIInfo\")",
                        " except:",
                        "  responseValue = 'The failure is because : The username or password are incorrect Or The Connections with the name AWS S3 QuickStart, AWS Oracle Quickstart or AWS Redshift Quickstart are already present in your account or the mapping or mapping task with the names S3 to Redshift and Aggregate Store Sales are already there .'",
                        "  responseData = {}",
                        "  responseData['Data'] = responseValue",
                        "  cfnresponse.send(event, context, cfnresponse.FAILED, responseData,\"RestAPIInfo\")"
                     ]
                  ]
               }
            },
            "Handler":"index.lambda_handler",
            "Role":{  
               "Fn::GetAtt":[  
                  "LambdaExecutionRole",
                  "Arn"
               ]
            },
            "Runtime":"python2.7",
            "Timeout":"60"
         }
      },
      "RestAPIInfo":{  
         "Type":"Custom::RestAPIInfo",
         "Properties":{  
            "ServiceToken":{  
               "Fn::GetAtt":[  
                  "CheckIfLicensePresentExistFunction",
                  "Arn"
               ]
            },
            "UserName":{  
               "Ref":"IICSUsername"
            },
            "Password":{  
               "Ref":"IICSPassword"
            },
            "ICSPodLocation":{  
               "Ref":"IICSPodLocation"
            }
         }
      },
      "LambdaExecutionRole":{  
         "Type":"AWS::IAM::Role",
         "Properties":{  
            "AssumeRolePolicyDocument":{  
               "Version":"2012-10-17",
               "Statement":[  
                  {  
                     "Effect":"Allow",
                     "Principal":{  
                        "Service":[  
                           "lambda.amazonaws.com"
                        ]
                     },
                     "Action":[  
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "Policies":[  
               {  
                  "PolicyName":"root",
                  "PolicyDocument":{  
                     "Version":"2012-10-17",
                     "Statement":[  
                        {  
                           "Effect":"Allow",
                           "Action":[  
                              "logs:*"
                           ],
                           "Resource":"arn:aws:logs:*:*:*"
                        }
                     ]
                  }
               }
            ]
         }
      }
   },
   "Outputs":{  

   }
}